/* minified */
const Octokit=require("@octokit/core")["Octokit"],github=require("@actions/github");exports.parameters=[{name:"gh_pat",required:!0},{name:"gh_labels",required:!1}];const DEFAULT_LABELS=["è‡ªå‹•åŒ–å ±å‘Š"];let octokit,context;async function createIssue(e,t){var r=e.title,e=await e.markdown();return await octokit.request("POST /repos/{owner}/{repo}/issues",{owner:context.repo.owner,repo:context.repo.repo,title:r,body:e,labels:t.map(e=>replace_time_var(e.trim()))})}async function updateIssue(e,t){t=await t.markdown();await octokit.request("PATCH /repos/{owner}/{repo}/issues/{issue_number}",{owner:context.repo.owner,repo:context.repo.repo,issue_number:e,body:t})}function replace_time_var(t){var e=time(),r=[[/\$time\$/g,"$year$/$month$/$day$ $hour$:$minute$:$second$"],[/\$year\$/g,e[0]],[/\$month\$/g,e[1]],[/\$day\$/g,e[2]],[/\$hour\$/g,e[3]],[/\$minute\$/g,e[4]],[/\$second\$/g,e[5]]];for(let e=0;e<r.length;e++)t=t.replace(r[e][0],r[e][1]);return t}function time(){const e=(new Date).toLocaleString("en",{timeZone:"Asia/Taipei"}).split(", ");var[t,r,o]=e[0].split("/");let[a,n,s]=e[1].match(/\d{1,2}/g);return 12==+a&&e[1].toLowerCase().includes("am")&&(a=String(+a-12)),+a<12&&e[1].toLowerCase().includes("pm")&&(a=String(+a+12)),[o,t,r,a,n,s]}exports.run=async({params:e,outputs:t,logger:r})=>{const o=(...e)=>r.log("[95m[GitHub Issue][m",...e);var a=(...e)=>r.error("[95m[GitHub Issue][m",...e);if(t.report){if(e.gh_pat){var n=e.gh_labels||DEFAULT_LABELS;if(octokit=new Octokit({auth:e.gh_pat}),context=github.context,t.issue&&t.issue.number)return await updateIssue(t.issue.number,t.report).then(()=>{o("Report Updated.")}),t.issue;n=await createIssue(t.report,n);return n&&n.data&&n.data.number&&o(`Report: https://github.com/${context.repo.owner}/${context.repo.repo}/issues/`+n.data.number),{number:n.data.number}}a("è«‹è¨­å®š GitHub Personal Access Token (gh_pat)")}else a("è«‹è¨­å®š report æ¨¡çµ„")};